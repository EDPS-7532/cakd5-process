--ESCAPE
SELECT * FROM employees where job_id like'%\_a%' escape '\';
SELECT * FROM employees where job_id like '%#_A%' escape '#';
--IN : OR 대신에 사용한다
SELECT*FROM employees WHERE MANAGER_ID = 101 OR MANAGER_ID 102 OR MANAGER_ID=103;
--q. EMPLOYEES 테이블에 있는 직원들에 대하여 현재기준으로 근속연수를 계산하세요
SELECT EMPLOYEE_ID, LAST_NAME, TRUNC((SYSDATE-HIRE_DATE)/365) 근속연수 FROM EMPLOYEES;

SELECT TO DATE('20210101')
TO_CHAR((TO_DATE('20210101'),'MONTHDD YYYY','NLS_DATE_LANGUAGE=ENGLISH') FORMAT1 FROM DUAL;

SELECT TO_CHAR(SYSDATE, 'YY/MM/DD HH24:MI:SS') FROM DUAL;
SELECT TO_CHAR(SYSDATE, 'YY/MM/DD') FROM DUAL;
SELECT TO_CHAR(SYSDATE, 'YYYY-MM-DD') FROM DUAL;
SELECT TO_CHAR(SYSDATE, 'HH24:MI:SS') FROM DUAL;
SELECT TO_CHAR(SYSDATE, 'DAY') FROM DUAL;
SELECT SALARY, TO_CHAR(SALARY,'09999') FROM EMPLOYEES;

--[과제] employees 테이블에서 employee_id, last_name, salary, hire_date 및 입사일 기준으로 근속년수를 계산해서 아래사항을 추가한후 출력하세요.
--2001년 1워 1일에 창업하여 현재 (2020년 12월 31일)까지 20년간 운영되어온 회사는 직원의 근속연수에 따라 30등급으로 나누어 등급에 따라 1000원의 bonus를 지급
--(bonus 기준 내림차순 정렬)

SELECT employee_id, last_name, salary, hire_date,
TRUNC(((to_date('20201231') - hire_date)/365))근속연수,
(WIDTH_BUCKET(TRUNC(((to_date('20.12.31') - hire_date)/365)),0,20,30)) 보너스등급,
(WIDTH_BUCKET(TRUNC(((to_date('20.12.31') - hire_date)/365)),0,20,30))*1000 bonus
FROM employees
ORDER BY bonus DESC;
--3줄 위의 값까지중 최저연봉
SELECT FIRST_NAME 이름, SALARY 연봉
FIRST_VALUE(SALARY) OVER(ORDER BY SALARY DESC ROWS 3 PRECEDING) 최고연봉
FROM EMPLOYEES;

SELECT FIRST_NAME 이름, SALARY 연봉,
LAST_VALUE(SALARY) OVER(ORDER BY SALARY DESC ROWS 3 PRECEDING)
FROM EMPLOYEES;

--위 아래 각각 2줄까지 중 최저연봉
SELECT FIRST_NAME 이름, SALARY 연봉,
LAST_VALUE(SALARY) OVER(ORDER BY SALARY DESC ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING) 최저연봉
FROM EMPLOYEES;

Q. 가격이 만원이상 이만원 이하인 도서를 검색하세요.
SELECT * 
FROM BOOK
WHERE PRICE >= 10000 AND PRICE<=20000;

SELECT SUM(SALEPRICE) AS"TOTAL PRICE" FROM ORDERS WHERE CUSTID=2;

SELECT SUM(SALEPRICE) AS TOTAL
AVG(SALEPRICE) AS AVERAGE,
MAX(SALEPRICE) AS MAXIMUM,
MIN(SALEPRICE) AS MINIMUN,
FROM ORDERS;

SELECT COUNT(*) FROM ORDERS;

SELECT CUSTID,COUNT(*) AS 도서수량
FROM ORDERS
WHERE SALEPRICE >= 8000
GROUP BY CUSTID
HAVING COUNT(*) >= 2;

SELECT*FROM CUSTOMER;

SELECT NAME,SUM(SALEPRICE)
FROM CUSTOMER,ORDERS
WHERE CUSTOMER.CUSTID=ORDERS.CUSTID
GROUP BY CUSTOMER.NAME
ORDER BY CUSTOMER.NAME;

SELECT CUSTOMER.NAME, BOOK.BOOKNAME
FROM CUSTOMER, ORDERS, BOOK
WHERE CUSTOMER.CUSTID=ORDERS.CUSTID AND ORDERS.BOOKID=BOOK.BOOKID;

SELECT C.NAME, B.BOOKNAME
FROM CUSTOMER C, ORDERS O, BOOK B
WHERE C.CUSTID=O.CUSTID=ORDERS.CUSTID AND ORDERS.BOOKID=BOOK.BOOKID;

SELECT CUSTOMER.NAME, SALEPRICE
FROM CUSTOMER LEFT OUTER JOIN ORDERS ON CUSTOMER.CUSTID=ORDERS.CUSTID;

SELECT BOOKNAME
FROM BOOK
WHERE PRICE=(SELECT MAX(PRICE) FROM BOOK);

SELECT NAME
FROM CUSTOMER
WHERE CUSTID IN (SELECT CUSTID FROM ORDERS);

SELECT NAME FROM CUSTOMER WHERE CUSTID IN
(SELECT CUSTID FROM ORDERS WHERE BOOKID IN
(SELECT BOOKID FROM BOOK WHERE PUBLISHER='대한미디어'));

SELECT NAME
FROM CUSTOMER
WHERE CUSTID IN (SELECT CUSTID FROM ORDERS);

SELECT B1.BOOKNAME
FROM BOOK B1
WHERE B1.PRICE > (SELECT AVG(B2.PRICE)
FROM BOOK B2 WHERE B2.PUBLISHER=B1.PUBLISHER)

SELECT NAME
FROM CUSTOMER
MINUS
SELECT NAME
FROM CUSTOMER
WHERE CUSTID IN (SELECT CUSTID FROM ORDERS);

SELECT NAME,ADDRESS
FROM CUSTOMER CS
WHERE EXISTS ( SELECT* FROM ORDERS OD WHERE CS.CUSTID=OD.CUSTID);

SELECT NAME,ADDRESS
FROM CUSTOMER
WHERE CUSTID IN(SELECT CUSTID FROM ORDERS);
UPDATE CUSTOMER
SET ADDRESS ='대한민국 부산'
WHERE CUSTID='5'

UPDATE CUSTOMER
SET ADDRESS = (SELECT ADDRESS FROM CUSTOMER
WHERE NAME ='김연아')
WHERE NAME = '박세리';
SELECT*FROM CUSTOMER;

DELETE CUSTOMER
WHERE CUSTID=5;

SELECT CUSTID 고객번호, ROUND(AVG(SALEPRICE),-2)"평균 주문 금액"
FROM ORDERS GROUP BY CUSTID;

SELECT*FROM BOOK;
SELECT BOOKID, REPLACE(BOOKNAME,'야구','농구') BOOKNAME, PRICE
FROM BOOK;

SELECT BOOKNAME 제목, LENGTH(BOOKNAME) 글자수, LENGTHB(BOOKNAME) 바이트수
FROM BOOK
WHERE PUBLISHER = '굿 스포츠';

SELECT*FROM CUSTOMER;
INSERT INTO CUSTOMER VALUES(6,'박세리','대한민국 대전','000-0000-0000');
INSERT INTO CUSTOMER VALUES(5,'박세리','대한민국 대전,NULL);
DELETE CUSTOMER
WHERE CUSTID =6;

SELECT SUBSTR(NAME,1,1)성 , COUNT(*)인원수
FROM CUSTOMER
GROUP BY SUBSTR(NAME,1,1);

SELECT ORDERDATE 주문일자 ORDERDATE+10 확정일자
FROM ORDERS;

SELECT SYSDATE FROM DUAL;
SELECT SYSDATE, TO_CHAR(SYSDATE,'YYYY/MM/DD/ DY HH24:MI:SS')SYSDATE1
FROM DUAL;

SELECT*FROM ORDERS;
SELECT ORDERID 주문번호, TO_CHAR(ORDERDATE,'YYYY/MM/DD DAY') 주문일, CUSTID 고객번호, BOOKID 도서번호
FROM ORDERS
WHERE ORDERDATE ='20/07/07';

SELECT*FROM CUSTOMER;
SELECT ROWNUM 순번, CUSTID 고객번호, NAME 이름, PHONE 전화번호
FROM CUSTOMER
WHERE ROWNUM<=2:

SELECT ORDERID,SAPLEPRICE FROM ORDERS
WHERE SALEPRICE <=(SELECT AVG(SALEPRICE) FROM ORDERS);

SELECT* FROM ORDERS;
SELECT ORDERID, CUSTID, SALEPRICE
FROM ORDERS B1
WHERE B1.SALEPRICE > (SELECT AVG(SALEPRICE)
FROM ORDERS B2 WHERE B2.CUSTID = B1.CUSTID);

SELECT* FROM CUSTOMER;
SELECT SUM(SALEPRICE) 총판매액
FROM ORDERS
WHERE CUSTID IN(SELECT CUSTID FROM CUSTOMER WHERE LIKE"%대한민국%");

SELECT ORDERID, SALEPRICE FROM ORDERS
WHERE SALEPRICE > (SELECT MAX(SALEPRICE) FROM WHERE CUSTID='3');

SELECT SUM(SALEPRICE)TOTAL
FROM ORDERS O
WHERE EXISTS(SELECT*FROM CUSTOMER C)
WHERE ADDRESS LIKE '%대한민국%' AND O.CUSTID=C.CUSTID;

SELECT*FROM CUSTOMER;
SELECT C.NAME, SUM(O.SALEPRICE) TOTAL
FROM(SELECT CUSTID,NAME FROM CUSTOMER WHERE CUSTID<=2) C, ORDERS O

SELECT(SELECT NAME FROM CUSTOMER C WHERE C.CUSTID=O.CUSTID)NAME,
SUM(SALEPRICE) TOTAL FROM ORDERS O
GROUP BY O.CUSTID;

SELECT*FROM CUSTOMER;
SELECT C.NAME, SUM(O.SALEPRICE) TOTAL
FROM(SELECT CUSTID,NAME FROM CUSTOMER WHERE CUSTID=<2) C, ORDERS O
WHERE C.CUSTID = O.CUSTID GROUP BY C.NAME;

CREATE VIEW VW_CUSTOMER
AS SELECT * FROM CUSTOMER WHERE ADDRESS LIKE '%대한민국%' ;

SELECT * FROM VW_CUSTOMER;
SELECT * FROM CUSTOMER;

CREATE VIEW VW_ORDERS(ORDERID,CUSTID,NAME,BOOKID,BOOKNAME,SALEPRICE,ORDERDATE)
AS SELECT O.ORDERID, O.CUSTID, C.NAME, O.BOOKID, B.BOOKNAME, O.SALEPRICE, O.ORDERDATE
FROM ORDERS O CUSTOMER C , BOOK B
WHERE O.CUSTID = C.CUSTID AND O.BOOKID=B.BOOKID;
SELECT*FROM VW_ORDERS;
SELECT ORDERID,BOOKNAME,SALEPRICE FROM VW_ORDERS WHERE NAME='김연아';

SELECT*FROM VW_CUSTOMER;
CREATE OR REPLACE VIEW VW_CUSTOMER
AS SELECT *  FROM CUSTOMER WHERE ADDRESS LIKE'%미국%';

DROP VW_CUSTOMER;

SELECT COUNT(*)
FROM EMPLOYEES 
WHERE COMMISSION_PCT IS NULL;

SELECT* FROM EMPLOYEES WHERE MOD(EMPLOYEE_ID,2)=1;

SELECT JOB_ID, LENGTH(JOB_ID) FROM EMPLOYEES;

SELECT JOB_ID, SUM(SALARY)연봉합계, AVG(SALARY)연봉평균, MAX(SALARY)최고연봉,
MIN(SALARY)최저연봉 FROM EMPLOYEES GROUP BY JOB_ID;

SE,ECT LAST_NAME, HIRE_DATE, LAST_DAY(ADD_MONTHS(HIRE_DATE,1))"입사 다음달 말일"

SELECT HIRE_DATE,NEXT_DAY(HIRE_DATE,'월') FROM EMPLOYEES;

SELECT LAST_NAME, HIRE_DATE, NEXT_DAY(ADD_MONTHS(HIRE_DATE,6),'월')D_DAY FROM EMPLOYEES;

SELECT JOB_ID SUM(SALARY)연봉합걔, AVG(SALARY)연봉평균, MAX(SALARY)최대연봉, MIN(SALARY) 최저연봉
FROM EMPLOYEES GROUP BY JOB_ID HAVING AVG(SALARY) >=5000 ORDER BY AVG(SALARY) DESC;

SELECT LAST_NAME, SALARY FROM EMPLOYEES WHERE LAST_NAME LIKE '%L%';

SELECT JOB_ID, HIRE_DATE
FROM EMPLOYEES
WHERE JOB_ID LIKE '%PROG%'

SELECT* FROM EMPLOYEES
WHERE SALARY >=10000 AND MANAGER_ID =100;

SELECT DEPARTMENT_ID.SALARY FROM EMPLOYEES WHERE SALARY>=10000 AND MANAGER_ID = 100;

SELECT DEPARTMENT_ID,SALARY FROM EMPLOYEES WHERE DEPARTMENT_ID < 100;

SELECT MANAGER_ID, JOB_ID FROM EMPLOYEES WHERE MANAGER_ID =101 OR MANAGER_ID = 103;

--Q. 사원번호가 110인 사원의 부서명

SELECT EMPLOYEE_ID, DEPARTMENT_NAME
FROM EMPLOYEES E, DEPARTMENTS D
WHERE E.DEPARTMENT_ID = D.DEPARMENT_ID AND EMPLOYEE_ID=110

--Q.사번이 120번인 사람의 사번, 이름, 업무(job_id), 업무명(job_title)을 출력(두가지 방식)
SELECT EMPLOYEE_ID, LAST_NAME, JOB_ID, JOB_TITLE
FROM EMPLOYEES E
JOIN JOBS J ON E.JOB_ID = J.JOB_ID WHERE EMPLOYEE_ID = 120;

SELECT EMPLOYEE_ID.LAST_NAME,JOB_ID,JOB_TITLE FROM EMPLOYEES E,JOBS J
WHERE EMPLOYEE_ID=120 AND E.JOB_ID=J.JOB_ID;

SELECT E.LAST_NAME, E.SALARY FROM EMPLOYEES E
WHERE EMPLOYEE_ID = 120 AND E.JOB_ID = J.JOB_ID;

--Q.100번 부서의 구성원 모두의 급여보다 더 많은 급여를 받는 사원을 출력
SELECT E.LAST_NAME, E.SALARY FROM EMPLOYEES E
WHERE E.SALARY > ALL(SELECT (SALARY) FROM EMPLOYEES WHERE DEPARTMENT_ID = 100);

--[과제] 2005년 이후에 입사한 직원의 사번, 이름, 입사일, 부서명(department_name), 업무명(job_title)을 출력
SELECT E.EMPLOYEE_ID, E.LAST_NAME, HIRE_DATE,DEPARTMENT_NAME,JOB_TITLE
FROM EMPLOYEE E,DEPARTMENTS D, JOBS J
WHERE E.DEPARTMENT_ID = D.DEPARTMENT_ID AND E.JOB_ID=J.JOB_ID AND HIRE_DATE >='05/01/01'
ORDER BY HIRE_dATE;

--[과제]job_title, department_name별로 평균 연봉을 구한 후 출력하세요. 
SELECT JOB_TITLE, DEPARTMENT_NAME, ROUND(AVG(SALARY))"평균연봉"
FROM EMPLOYEES E, DEPARTMENTS D,JOBS J
WHERE E.DEPARTMENT_ID = D.DEPARTMENT_ID AND E.JOB_ID = J.JOB_ID
GROUP BY JOB_TITLE, DEPARTMENT_NAME

--[과제]평균보다 많은 급여를 받는 직원 검색 후 출력하세요.
SELECT*'FROM EMPLOYEES WHERE SALARY(SELECT AVG(SALARY) FROM EMPLOYEES);

SELECT LAST_NAME,HIRE_dATE,DEPARTMENT_ID
FROM EMPLOYEES WHERE LOWER (LAST_NAME)='KING'

-[과제] 사번, 이름, 직급, 출력하세요. 단, 직급은 아래 기준에 의함
--salary > 20000 then '대표이사'
--salary > 15000 then '이사' 
--salary > 10000 then '부장' 
--salary > 5000 then '과장' 
--salary > 3000 then '대리'
--나머지 '사원'

SELECT EMPLOYEE_ID 사원, LAST_NAME 이름 
CASE WHEN SALARY > 20000 THEN '대표이사'
WHEN SALARY > 15000 THEN '이사'
WHEN SALARY > 10000 THEN '부장'
WHEN SALARY > 5000   THEN '과장'
WHEN SALARY >  3000  THEN '대리'
ELSE '사원'
END AS 직급
FROM EMPLOYEES;





-- [과제] employees 테이블에서 department_id =50인 직원의 연봉을 내림차순으로 정렬하여 누적카운트를 출력하세요.
SELECT EMPLOYEES, DEPARTMENT_ID, SALARY
COUNT(*) OVER(ORDER BY SALARY DESC) 누적카운트 FROM EMPLOYEES WHERE DEPARTMENT_ID=50;
-- [과제] employees 테이블에서 department_id를 기준으로 오름차순 정렬하고 직원의 연봉 누적 합계를 출력하세요.
SELECT DEPARTMENT_ID,LAST_NAME,SALARY,SUM(SALARY) OVER(PARTITION BY DEPARTMENT_ID ORDER BY DEPARTMENT_ID ASC)
FROM EMPLOYEES;

SELECT FIRST_NAME,DEPARTMENT_ID 부서, SALARY 연봉, RANK () OVER(